 -*- org-insert-tilde-language: emacs-lisp; -*-
#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :comments link
#+AUTHOR: Osvarcha
#+EMAIL: osvarcha@hotmail.com
#+STARTUP: showall
#+OPTIONS: toc:3
* Package Managent
#+begin_src emacs-lisp :results silent
  (setq straight-check-for-modifications nil)
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Load the helper package for commands like `straight-x-clean-unused-repos'
  (require 'straight-x)
#+end_src
** Use-Package
#+begin_src emacs-lisp :results silent
  (straight-use-package 'use-package)
  ;; Configure use-package to use straight.el by default
  (use-package straight
	       :custom (straight-use-package-by-default t))
  (setq use-package-always-defer t)
#+end_src


*** Blackout
#+begin_src emacs-lisp :results silent
    (use-package blackout
      :demand t)
#+end_src


*** el-patch
#+begin_src emacs-lisp :results silent
  (use-package el-patch)
  ;; Only needed at compile time, thanks to Jon
  ;; <https://github.com/radian-software/el-patch/pull/11>.
  (eval-when-compile
    (require 'el-patch))
#+end_src

* Prelimitary
** These are some general configurations that Iâ€™ve slowly accumulated.
#+begin_src emacs-lisp :results silent
  ;; SmallCOnfigs
  (setq user-full-name "Jeremy Friesen"
	user-mail-address "jeremy@jeremyfriesen.com")

  ;; Ask before killing emacs
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; So Long mitigates slowness due to extremely long lines.
  ;; Currently available in Emacs master branch *only*!
  (when (fboundp 'global-so-long-mode)
    (global-so-long-mode))

  ;; Move the backup fies to user-emacs-directory/.backup
  (setq backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))

  ;; UTF8Coding
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
  ;; -UTF8Coding

  ;; EditExp
  ;; Remove useless whitespace before saving a file
  (defun delete-trailing-whitespace-except-current-line ()
    "An alternative to `delete-trailing-whitespace'.
	The original function deletes trailing whitespace of the current line."
    (interactive)
    (let ((begin (line-beginning-position))
	  (end (line-end-position)))
      (save-excursion
	(when (< (point-min) (1- begin))
	  (save-restriction
	    (narrow-to-region (point-min) (1- begin))
	    (delete-trailing-whitespace)
	    (widen)))
	(when (> (point-max) (+ end 2))
	  (save-restriction
	    (narrow-to-region (+ end 2) (point-max))
	    (delete-trailing-whitespace)
	    (widen))))))

  (defun smart-delete-trailing-whitespace ()
    "Invoke `delete-trailing-whitespace-except-current-line' on selected major modes only."
    (unless (member major-mode '(diff-mode))
      (delete-trailing-whitespace-except-current-line)))

  (add-hook 'before-save-hook #'smart-delete-trailing-whitespace)

  ;; Replace selection on insert
  (delete-selection-mode 1)

  ;; Map Alt key to Meta
  (setq x-alt-keysym 'meta)
  ;; -EditExp

  ;; History
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :custom
    (recentf-auto-cleanup "05:00am")
    (recentf-max-saved-items 200)
    (recentf-exclude '((expand-file-name package-user-dir)
		       ".cache"
		       ".cask"
		       ".elfeed"
		       "bookmarks"
		       "cache"
		       "ido.*"
		       "persp-confs"
		       "recentf"
		       "undo-tree-hist"
		       "url"
		       "COMMIT_EDITMSG\\'")))

  ;; When buffer is closed, saves the cursor location
  (save-place-mode 1)

  ;; Set history-length longer
  (setq-default history-length 500)
  ;; -History

  (menu-bar-mode -1)
  (unless (and (display-graphic-p) (eq system-type 'darwin))
    (push '(menu-bar-lines . 0) default-frame-alist))
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  ;; No toolbar
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  ;; No scroll bars
  (if (fboundp 'scroll-bar-mode) (set-scroll-bar-mode nil))

  ;; EnableUTF8
  ;; Contrary to what many Emacs users have in their configs, you don't need
  ;; more than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")
  (set-charset-priority 'unicode)
  (setq locale-coding-system   'utf-8)   ; pretty
  (set-terminal-coding-system  'utf-8-unix)   ; pretty
  (set-keyboard-coding-system  'utf-8)   ; pretty
  (set-selection-coding-system 'utf-8)   ; please
  (prefer-coding-system        'utf-8)   ; with sugar on top
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
  ;; -EnableUTF8

  (fido-vertical-mode t)
  (electric-pair-mode t)
  (global-hl-line-mode)
  (setq display-line-numbers 'relative)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (display-time-mode t)
  (display-battery-mode t)
#+end_src
** ShortKeys
#+begin_src emacs-lisp :results silent
  (global-set-key (kbd "C-z") nil)
#+end_src
* Package Basic
** Search
*** Avy
#+begin_src emacs-lisp :results silent
  ;; Avy
(use-package avy
  :blackout t
  :bind
  (("C-z C-c" . avy-goto-char-timer)
   ("C-z C-l" . avy-goto-line))
  :custom
  (avy-timeout-seconds 0.3)
  (avy-style 'pre)
  :custom-face
  (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))));
;; -Avy
#+end_src
*** CtrlF
#+begin_src emacs-lisp :results silent
;; CtrlF
(use-package ctrlf
  :init
  (ctrlf-mode +1))
;; CtrlF
#+end_src
*** ColorRG
#+begin_src emacs-lisp :results silent
;; ColorRG
(use-package color-rg
  :blackout t
  :straight (color-rg :type git
                      :host github
                      :repo "manateelazycat/color-rg")
  :if (executable-find "rg")
  :bind ("C-z C-s" . color-rg-search-input))
;; -ColorRG
#+end_src
** Dired
#+begin_src emacs-lisp :results silent
  ;; DiredPackage
  (use-package dired
    :ensure nil
    :straight nil
    :bind
    (("C-x C-j" . dired-jump))
    :custom
    ;; Always delete and copy recursively
    (dired-listing-switches "-lah")
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired
    (dired-dwim-target t)
    ;; Move files to trash when deleting
    (delete-by-moving-to-trash t)
    ;; Load the newest version of a file
    (load-prefer-newer t)
    ;; Detect external file changes and auto refresh file
    (auto-revert-use-notify nil)
    (auto-revert-interval 3) ; Auto revert every 3 sec
    :config
    ;; Enable global auto-revert
    (global-auto-revert-mode t)
    ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
    (put 'dired-find-alternate-file 'disabled nil)
    :hook
    (dired-mode . (lambda ()
		    (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
		    (local-set-key (kbd "RET") #'dired-find-alternate-file)
		    (local-set-key (kbd "^")
				   (lambda () (interactive) (find-alternate-file "..")))))
    )
  ;; -DiredPackage
#+end_src

** Edit
*** Iedit
#+begin_src emacs-lisp :results silent
  ;; IEditPac
  (use-package iedit
    :bind ("C-z ," . iedit-mode)
    :blackout t)
  ;; -IEditPac
#+end_src

*** Sudo Edit
#+begin_src emacs-lisp :results silent
  ;; SudoEditPac
  (use-package sudo-edit
    :commands (sudo-edit))
  ;; -SudoEditPac
#+end_src

** Marginalia
#+begin_src emacs-lisp :results silent
  ;; Marginalia
  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets

    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
  ;; -Marginalia
#+end_src

** Vundo
#+begin_src emacs-lisp :results silent
  ;; Vundo
  (use-package vundo
    :commands (vundo)

    :straight (vundo :type git :host github :repo "casouri/vundo")

    :config
    ;; Take less on-screen space.
    (setq vundo-compact-display t)

    ;; Better contrasting highlight.
    (custom-set-faces
     '(vundo-node ((t (:foreground "#808080"))))
     '(vundo-stem ((t (:foreground "#808080"))))
     '(vundo-highlight ((t (:foreground "#FFFF00")))))
    :blackout t)
  ;; -Vundo
#+end_src


** Yasnnippet
#+begin_src emacs-lisp :results silent
  ;; YASnippetPac
  (use-package yasnippet
    :blackout yas-minor-mode
    :init
    (use-package yasnippet-snippets :after yasnippet)
    :hook ((prog-mode LaTeX-mode org-mode markdown-mode) . yas-minor-mode)
    :bind
    (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
	  (("TAB" . smarter-yas-expand-next-field)
	   ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
	    (old-tick (buffer-chars-modified-tick)))
	(yas-expand)
	(when (and (eq old-point (point))
		   (eq old-tick (buffer-chars-modified-tick)))
	  (ignore-errors (yas-next-field))))))
  ;; -YASnippetPac
#+end_src

# ** Completion
* UI
** Theme
#+begin_src emacs-lisp :results silent
;; DoomThemes
(use-package doom-themes
  :no-require t
  :functions (true-color-p)
  :demand t
  :custom-face
  (cursor ((t (:background "BlanchedAlmond"))))
  :config
  ;; flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (load-theme 'doom-acario-dark t)
  (defun switch-theme ()
    "An interactive funtion to switch themes."
    (interactive)
    (disable-theme (intern (car (mapcar #'symbol-name custom-enabled-themes))))
    (call-interactively #'load-theme)))
;; -DoomThemes

;; DoomModeline
(use-package doom-modeline
  :no-require t
  :demand t
  :functions (true-color-p)
  :custom
  ;; Don't compact font caches during GC. Windows Laggy Issue
  (inhibit-compacting-font-caches t)
  (doom-modeline-minor-modes t)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-height 15)
  :config
  (doom-modeline-mode))
  ;; -DoomModeline
#+end_src
* Programation
* Functions
** Org Include Auto
#+begin_src emacs-lisp :results silent
  ;; OrgIncludeAuto
  (defun save-and-update-includes ()
    "Update the line numbers of #+INCLUDE:s in current buffer.
  Only looks at INCLUDEs that have either :range-begin or :range-end.
  This function does nothing if not in `org-mode', so you can safely
  add it to `before-save-hook'."
    (interactive)
    (when (derived-mode-p 'org-mode)
      (save-excursion
	(goto-char (point-min))
	(while (search-forward-regexp
		"^\\s-*#\\+INCLUDE: *\"\\([^\"]+\\)\".*:range-\\(begin\\|end\\)"
		nil 'noerror)
	  (let* ((file (expand-file-name (match-string-no-properties 1)))
		 lines begin end)
	    (forward-line 0)
	    (when (looking-at "^.*:range-begin *\"\\([^\"]+\\)\"")
	      (setq begin (match-string-no-properties 1)))
	    (when (looking-at "^.*:range-end *\"\\([^\"]+\\)\"")
	      (setq end (match-string-no-properties 1)))
	    (setq lines (decide-line-range file begin end))
	    (when lines
	      (if (looking-at ".*:lines *\"\\([-0-9]+\\)\"")
		  (replace-match lines :fixedcase :literal nil 1)
		(goto-char (line-end-position))
		(insert " :lines \"" lines "\""))))))))

  (add-hook 'before-save-hook #'save-and-update-includes)

  (defun decide-line-range (file begin end)
    "Visit FILE and decide which lines to include.
  BEGIN and END are regexps which define the line range to use."
    (let (l r)
      (save-match-data
	(with-temp-buffer
	  (insert-file-contents file)
	  (goto-char (point-min))
	  (if (null begin)
	      (setq l "")
	    (search-forward-regexp begin)
	    (setq l (line-number-at-pos (match-beginning 0))))
	  (if (null end)
	      (setq r "")
	    (search-forward-regexp end)
	    (setq r (1+ (line-number-at-pos (match-end 0)))))
	  (format "%s-%s" (+ l 1) (- r 1)))))) ;; Exclude wrapper
  ;; -OrgIncludeAuto
#+end_src
** Editing Config
#+begin_src emacs-lisp :results silent
  ;; EditConfig
  (defun edit-configs ()
    "Opens the README.org file."
    (interactive)
    (find-file "~/.emacs.d/README.org"))

  (global-set-key (kbd "C-z e") #'edit-configs)
  ;; -EditConfig
#+end_src
